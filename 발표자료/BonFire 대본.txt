사랑받는 리액트 7기 형님들 안녕하십니까
1조 현희와 아이들의 발표를 맡은 팀장 안현희입니다.
바로 발표 시작하겠습니다.

----------------------------------------------------------------------------------------------

저희조 프로젝트 명칭은 BonFire입니다.
Bonfire는 모닥불이라는 뜻을 가지고 있는데요
저희 프로젝트가 날씨 데이터를 기반으로 캠핑장소를 안내해주는 서비스이기 때문에 이렇게 이름을 지어보았습니다.
사실 프로젝트 명은 민준님이 지어주셨습니다.

----------------------------------------------------------------------------------------------

다음은 목차를 소개하겠습니다.

프로젝트 소개
프로젝트 수행 절차 및 방법
기술스택
시연
트러블슈팅
팀 소개 및 후기 순으로 진행하겠습니다.

----------------------------------------------------------------------------------------------

네, 그럼 먼저 프로젝트 소개를 하겠습니다.

BonFire는 날씨 데이터를 활용하여 캠핑 장소를 안내 해주는 서비스입니다.
사용자의 현재 위치를 기반으로 주변 캠핑장을 안내하는 서비스를 제공하고
캠핑장 주변의 편의시설 정보를 한 눈에 확인할 수 있으며,
해당 캠핑장의 리뷰와 좋아요 기능은 사용자 간의 소통을 돕고,
만족스러운 캠핑 경험을 공유할 수 있도록 지원합니다.

----------------------------------------------------------------------------------------------

프로젝트 수행절차 및 방법은 다음과 같습니다.

발제 후 당일에 기획 및 업무분담과 개발환경 셋팅까지 모두 마쳤고요.
12월 23일부터 26일까지 UI구성 및 각 파트별 기능을 구현했습니다.
마지막으로 12월 27일에는 최종 테스트 및 디버깅을 진행함으로서 프로젝트를 완성했습니다.

----------------------------------------------------------------------------------------------

다음은 기술스택입니다.

API를 무려 3개씩이나 사용했고요. 3개씩이나 사용했구요. 3개씩이나 사용했습니다.
스타일을 꾸미는데는 테일윈드CSS, 샤드씨엔, 루씨드리액트, 스위퍼 등을 사용했습니다.
디비는 수파베이스, 상태관리로는 탄스택쿼리와 주스탄드를 사용했습니다.

----------------------------------------------------------------------------------------------

다음은 프로세스 흐름도 입니다.

저희 프로젝트는 이렇게 흘러갑니다.

----------------------------------------------------------------------------------------------

다음은 시연이 있겠습니다.

시연영상 함께 시청하시겠습니다.

----------------------------------------------------------------------------------------------

다음은 트러블 슈팅에 대해 말씀드리겠습니다.

저희 프로젝트의 가장 큰 이슈가 있었다면
빌드시 모든 페이지가 다이나믹 페이지로 빌드되는것이었습니다.
사실 이렇게 되면 넥스트를 사용할 필요가 없기 때문에,
이 부분을 반드시 해결해야만 했습니다.

문제의 근본적인 원인은 Header컴포넌트 쪽의 fetchSession 함수가 문제였습니다.
fetchSession함수는 서버에서 세션 데이터를 가져오는 비동기 작업입니다.
이 함수가 실행되는 시점은 서버 측에서 이루어지며,
Next.js는 데이터를 가져오기 위해 해당 페이지를 서버사이드 렌더링(SSR)방식으로 처리됩니다.
이로 인해, 정적인 HTML을 생성하지 못하고 모든 페이지가 동적으로 렌더링됩니다.

이를 해결하기 위해, Header 컴포넌트를 클라이언트 컴포넌트로 선언했습니다.
최상단에 "use client" 지시어를 사용하여 컴포넌트가 서버가 아닌 클라이언트에서만 동작하도록 설정했습니다.
이 방식으로 useState, useEffect 같은 클라이언트 전용 로직을 활용해 필요한 데이터를 처리할 수 있었고
결과적으로, 서버 빌드 과정에 영향을 주지 않고 클라이언트에서 동적으로 데이터를 가져오도록 수정할 수 있었습니다.

----------------------------------------------------------------------------------------------

다음은 라이트하우스 측정값입니다.

성능 최적화 전에는 점수가 왼쪽처럼 나왔는데
성능 최적화 후에는 점수가 아주 양호합니다.

----------------------------------------------------------------------------------------------

다음은 팀 소개를 하겠습니다.

저는 팀장 안현희고요. 북마크 기능과 마이페이지를 담당했습니다.
현지님은 소셜로그인과 회원가입을 맡아주셨구요.
채현님은 댓글기능과 상세페이지를 담당해주셨습니다.
강건님은 캠핑API와 날씨API 연동 및 관련된 기능을 담당해주셨구요.
민준님은 지도 API 연동 및 지도와 관련된 기능을 맡아주셨습니다.

----------------------------------------------------------------------------------------------

이제 마지막 순서로 프로젝트 소감을 말씀드리겠습니다.
시간관계상 채현님과 민준님 두 분의 이야기만 하겠습니다.

채현님은
좋았던점으로

팀원들과의 소통이 매우 원활한점
SSR 페이지에서 클라이언트와 서버 컴포넌트 분리를 익힐 수 있어 유익한 경험이다는것과
어려운 점은 팀원과 공유하며 효과적으로 해결할 수 있었던것을 말씀해주셨습니다.

아쉬웠던점으로는

카카오지도 API의 정적 지도 관련 공식 문서가 불친절해 어려움을 겪었고
Tailwind로 반응형 레이아웃을 구성할 때, 가독성이 떨어져 코드의 동작을 이해하는 데 시간이 걸렸다는것과
초기에 유저 데이터를 store에 저장하지 않아 여러 페이지에서 동일한 server actions를 작성하며 시간을 낭비했다는것을
말씀해주셨습니다.

----------------------------------------------------------------------------------------------

민준님은
좋았던점으로

팀원들과의 원활한 의사소통이 좋았던점
지도 API를 활용하여 다양한 기능을 구현하는 게 좋았던점
그리고 팀원분들이 막히는 부분이 있으면 친절하게 잘 알려주었다고 말씀해주셨구요.

아쉬웠던점으로는

현재는 auth만 zustand로 상태를 관리 중인데,
Map내에서 props drilling을 통해 전해주는 데이터가 지나치게 많은 걸 나중에서야 알았고,
처음부터 맵 쪽 상태관리를 전역으로 zustand로 맞춰놓는 편이 더 나았을 거 같다.
라고 말씀해주셨습니다.

----------------------------------------------------------------------------------------------

이상 1조 BonFire의 발표를 모두 마치겠습니다.
경청해주셔서 감사합니다.
새해 복 많이 받으세요!!!
